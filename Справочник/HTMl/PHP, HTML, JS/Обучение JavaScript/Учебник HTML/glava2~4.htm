<html><head>






<title>Приемы программирования на JavaScrip </title>
		    <style type="text/css">
A.noneline { font-family: Arial, Serif; text-decoration: none; }
FONT.arial { font-family: Arial, Serif; }
TD.arial   { font-family: Arial, Serif; }
TH.arial   { font-family: Arial, Serif; }
PRE        { font-family: Monospace; color: navy; }
SAMP       { font-family: Monospace; color: navy; }
TT         { font-family: Monospace; color: navy; }
VAR        { font-family: Monospace; color: navy; }
</style>
</head>
<body bgcolor="#FFF5EE" text="#000000" link="#FF0000" alink="#FF0000" vlink="#A52A2A">
<basefont size="3">
<center>
<table width=100% border=0 cellpadding=0>
<tr valign=top><td class=arial><a href="http://www.citforum.ru/"><img height=50 width=150 src="_pic_/logo3D.gif" alt="Server for Information Technologies" border=0></a><br>
</td>
<td align=right class=arial>
<font size="-2">
Сервер поддерживается<br>
<a class=noneline href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>
(095) 932-9212, 932-9213, 939-0783<br>
E-mail: <a class=noneline href="mailto:info@citforum.ru?Subject='From page topic CIT-FORUM'">info@citforum.ru</a></font>
</tr>
<tr>
<th colspan=2 class=arial>
<font color=#000080 size=2><a href="http://www.citforum.ru" class=noneline>Сервер Информационных Технологий</a> содержит море(!) аналитической информации</font>
<hr noshade>
</th>
</tr>
</table>
</center>

<h4>2.13. Приемы программирования на JavaScript</h4>
<P ALIGN="JUSTIFY">Проще всего начать изучение программирования на каком-либо языке с простых примеров, которые читатель может немедленно проверить. С подачи авторов языка С все современные книги по программированию начинаются с примера печати фразы "Hello world" в разных ее проявлениях ("Hello Java", "Hello Perl" и т.п.). Для JavaScript точного аналога такого подхода найти нельзя. Но мы попробуем проиллюстрировать на простых примерах основные приемы программирования.
<P ALIGN="JUSTIFY">Аналогом "Hello world" можно считать выдачу сообщения в отдельном окне, которое порождается при нажатии на гипертекстовую ссылку:
<i><P ALIGN="JUSTIFY">Пример 2.9.</i> Программа выдачи простого предупреждения при выборе гипертекстовой ссылки. Схема URL - JavaScript
<pre>
	&lt;HTML&gt;
	&lt;HEAD&gt;
	&lt;title&gt;Самый первый пример JavaScript&lt;/title&gt;
	&lt;/HEAD&gt;
	&lt;BODY&gt;
	&lt;center&gt;
	&lt;h1&gt;Мой первый пример JavaScript&lt;/h1&gt;
	&lt;hr&gt;
	&lt;/center&gt;
	В текст этого документа внедрена гипертекстовая ссылка
	&lt;a href="javascript:window.alert('Do you speak English?')"&gt;
	"Don`t click here"
	&lt;/a&gt;.
	Любопытно, что будет, если все-таки выбрать?
	&lt;/BODY&gt;
	&lt;/HTML&gt;</Pre>
<P ALIGN="JUSTIFY">В данном примере среди текста документа расположена гипертекстовая ссылка "Don`t click here". Если ее выбрать при просмотре (кликнуть мышкой), то на экране появится окно-предупреждение с вопросом: "Do you speak English?".
<P ALIGN="JUSTIFY">Генерация этого окна осуществляется специальным методом window.alert, который выполняется при выборе гипертекстовой ссылки. Если быть более точным, то в качестве URL информационного ресурса, который следует загрузить при переходе по данной гипертекстовой ссылке, используется схема JavaScript - расширение спецификации URI для программирования сценариев просмотра гипертекстовых документов World Wide Web. В этом случае выполнение JavaScript-программы происходит при выборе гипертекстовой ссылки, а сам код программы записан как URL.
<P ALIGN="CENTER"><IMG SRC="_pic_/image426.gif">
<i><P ALIGN="CENTER">Рис. 2.1. Выполнение скрипта при выборе гипертекстовой ссылки
</I><P ALIGN="JUSTIFY">Добиться такого же эффекта можно и другим способом, не прибегая к новой схеме URL. Для этой цели можно использовать событие, которое генерируется программой-навигатором при выборе гипертекстовой ссылки - Click.
<i><P ALIGN="JUSTIFY">Пример 2.10.</i> Программа выдачи простого предупреждения по событию Click при выборе гипертекстовой ссылки
<pre>
	&lt;HTML&gt;
	&lt;HEAD&gt;
	&lt;title&gt;Самый первый пример JavaScript&lt;/title&gt;
	&lt;/HEAD&gt;
	&lt;BODY&gt;
	&lt;center&gt;
	&lt;h1&gt;Мой первый пример JavaScript&lt;/h1&gt;
	&lt;hr&gt;
	&lt;/center&gt;
	В текст этого документа внедрена гипертекстовая ссылка
	&lt;a href="javascript:void(0)" onClick="window.alert('Do you speak
 	English?')"&gt;"Don`t click here"&lt;/a&gt;. Любопытно, что будет, 
	если все-таки выбрать?
	&lt;/BODY&gt;
	&lt;/HTML&gt;</Pre>
<P ALIGN="JUSTIFY">Обойтись без новой схемы URL здесь также не удается, но она используется только для того, чтобы после выбора гипертекстовой ссылки в рабочем поле программы навигатора не появлялось пустой страницы, или не приходилось загружать вновь старую страницу. Для обработки события используется конструкция onClick, которая реализует обращение к обработчику (handler) данного события, который в свою очередь вызывает выполнение кода, записанного вслед за onClick.</Pre>
<P ALIGN="JUSTIFY">Размещение кода программы на JavaScript непосредственно в тагах HTML является обычным делом, но не всегда бывает удобным. Наиболее часто JavaScript-код выносят в специальный HTML-контейнер SCRIPT(&lt;/script&gt;.....&lt;/script&gt;). Для того, чтобы продемонстрировать применение этого подхода, видоизменим наш пример следующим образом:
<i><P ALIGN="JUSTIFY">Пример 2.11.</i> Применение контейнера SCRIPT для размещение JavaScript-кода
<pre>
	&lt;HTML&gt;
	&lt;HEAD&gt;
	&lt;title&gt;Самый первый пример JavaScript&lt;/title&gt;
	&lt;script language="JavaScript"&gt;
	&lt;!-- Start the text of programme
	function question()
	         {
	          window.alert("Do you speak English?");
	         }
	// --&gt;
	&lt;/script&gt;
	&lt;/HEAD&gt;
	&lt;BODY&gt;
	&lt;center&gt;
	&lt;h1&gt;Мой первый пример JavaScript&lt;/h1&gt;
	&lt;hr&gt;
	&lt;/center&gt;
	В текст этого документа внедрена гипертекстовая ссылка 
	&lt;a href="javascript:void(0)" onClick="question()"&gt;"Don`t click 
	here"&lt;/a&gt;. Любопытно, что будет, если все-таки выбрать?
	&lt;/BODY&gt;
	&lt;/HTML&gt;</Pre>
<P ALIGN="JUSTIFY">Данный пример развивает применение JavaScript-кода для обработки события Click. Но только в этом случае мы не размещаем весь код обработки события в атрибуте onClick. В данный атрибут помещается только вызов функции, которая будет обрабатывать это событие. Само тело функции размещено в заголовке HTML-документа внутри тагов &lt;script ...&gt; и &lt;/script&gt;
<P ALIGN="JUSTIFY">Для того, чтобы защитить текст функции от интерпретации браузерами, которые не поддерживают JavaScript, мы поместили код в HTML-комментарий. При этом последняя строка этого комментария должна начинаться как комментарий JavaScript, чтобы браузер, понимающий JavaScript, не интерпретировал ее как часть JavaScript-кода.
<P ALIGN="JUSTIFY">Различные браузеры поддерживают разные версии JavaScript, что накладывает определенные ограничения при написании сценариев JavaScript. Для того, чтобы максимально адаптировать свою программу к конкретному типу программного обеспечения, часто включают проверку версии и имени программы-браузера в JavaScript.
<i><P ALIGN="JUSTIFY">Пример 2.12. </i>Получение типа программы просмотра HTML-страниц
<pre>
	&lt;HTML&gt;
	&lt;HEAD&gt;
	&lt;title&gt;Test of Browser name&lt;/title&gt;
	&lt;/HEAD&gt;
	&lt;BODY&gt;
	&lt;h1 align=center&gt;Проверка имени типа браузера;&lt;/h1&gt;
	&lt;hr&gt;
	Для того, чтобы получить имя вашей программы просмотра
	выберите кнопку "Browser"&lt;br&gt;
	&lt;center&gt;
	&lt;form name=kuku&gt;
	&lt;input type=button name=browser value=Browser
	 onClick="window.alert(window.navigator.appName)"&gt;
	&lt;/form&gt;
	&lt;/BODY&gt;
	&lt;/HTML&gt;</Pre>
<P ALIGN="JUSTIFY">Данная программа в точности повторяет пример 2.10, но в окне предупреждения выдает имя программы просмотра HTML-страниц (window.navigator.appName). Вообще говоря, в простом сообщении о типе программного обеспечения большого смысла нет, но если вставить проверку данного имени в текст HTML-страницы и реализовать условную компиляцию страницы, то тогда обращение к данной конструкции JavaScript будет оправданным:
<i><P ALIGN="JUSTIFY">Пример 2.13. </i>Условная генерация текста страницы по типу программы просмотра
<pre>
	&lt;HTML&gt;
	&lt;HEAD&gt;
	&lt;title&gt;Test of Browser name&lt;/title&gt;
	&lt;/HEAD&gt;
	&lt;BODY&gt;
	&lt;h1 align=center&gt;Проверка имени типа браузера&lt;/h1&gt;
	&lt;hr&gt;
	&lt;script language=JavaScript&gt;
	&lt;!--
	if(window.navigator.appName == "Netscape")
	{
	document.write("&lt;br&gt;&lt;center&gt;&lt;font color=steelblue size=+5&gt;");
	document.write("У вас хороший навигатор.");
	document.write("&lt;/font&gt;&lt;/center&gt;");
	}
	else
	{
	document.write("&lt;font color=red size=+3&gt;Необходим Netscape Navigator
 	версии 3.0 и выше.&lt;/font&gt;");
	window.alert("Down load new version of your browser now.");
	}
	// --&gt;
	&lt;/script&gt;
	&lt;/BODY&gt;
	&lt;/HTML&gt;</Pre>
<P ALIGN="JUSTIFY">В данном примере текст JаvaScript-программы размещен непосредственно в теле документа. При его загрузке, когда HTML-интерпретатор доходит до контейнера SCRIPT, вызывается JavaScript-интерпретатор. В этот момент будет проверяться условие, которое содержится в операторе if. В зависимости от результата проверки этого условия остальной текст страницы примет тот или иной вид в зависимости от типа программы просмотра. При просмотре данного документа программой отличной от Netscape Navigator будет выдано еще и окно предупреждения.
<P ALIGN="CENTER"><IMG SRC="_pic_/image427.gif">
<i><P ALIGN="CENTER">Рис.2.2. При загрузке был определен Netscape Navigator в качестве программы-браузера HTML-страниц
</I><P ALIGN="JUSTIFY">Вообще говоря, проверить тип программы просмотра можно на сервере протокола HTTP и передать программе просмотра уже готовую страницу без условной генерации ее содержания. Но это возможно только в том случае, когда автор страницы имеет возможность программировать на машине где установлен сервер и имеет возможность администрировать этот сервер. В ряде случаев, когда место под Website арендуется и в договоре аренды нет пункта, обеспечивающего управление ресурсами сервера, в этом случае программы с условной генерацией содержания страниц бывают чрезвычайно полезными. Другой случай - это работа в локальном режиме без сервера. Здесь JavaScript является единственным средством управления просмотром. Существует еще ряд случаев, когда применение контейнера SCRIPT в теле документа является вполне оправданным, но на них мы остановимся позже в контексте решения конкретных задач управления сценариями просмотра.
<P ALIGN="JUSTIFY">Однако, чаще всего, текст JavaScript-кода размещают в виде описания функций в заголовке документа, что делает использование такого кода более удобным. Связано это с двумя моментами, которые следует учитывать при написании JavaScript-программ: область действия описания программы (из каких частей документа или страницы она видна, а следовательно, на нее можно сослаться как на функцию, и принципы интерпретации кода при просмотре документа.
<P ALIGN="JUSTIFY">Если код размещается в теле документа, то он интерпретируется только в случае переразметки отображаемого документа (загрузка, изменение параметров окна, перезагрузка). Если текст размещен в заголовке, то на него можно сослаться из любого места документа, а точнее из любого обработчика событий, которые указываются как атрибуты HTML-тагов.
<P ALIGN="JUSTIFY">Вернемся теперь снова к примеру 2.13, но только разместим теперь код JavaScript не в тексте документа, а в отдельном файле:
<i><P ALIGN="JUSTIFY">Пример 2.14.</i> Размещение скрипта в отдельном файле (netscape.jsc)
<pre>
	&lt;HTML&gt;
	&lt;HEAD&gt;
	&lt;title&gt;Test of Browser name&lt;/title&gt;
	&lt;/HEAD&gt;
	&lt;BODY&gt;
	&lt;h1 align=center&gt;Проверка имени типа браузера&lt;/h1&gt;
	&lt;hr&gt;
	&lt;script language=JavaScript src=netscape.jsc&gt;
	&lt;/script&gt;
	&lt;/BODY&gt;
	&lt;/HTML&gt;</Pre>
<P ALIGN="JUSTIFY">В данном случае текст условной генерации страницы размещен во внешнем файле. При загрузке страницы этот текст докачивается программой просмотра и исполняется так же, как если бы он размещался в документе. Любопытно, что при просмотре текста документа через опцию "View Source" текст скрипта не отображается, что дает возможность скрыть его содержание от пользователя. В самом файле, который содержит конструкции JavaScript, HTML-таги не используются:
<i><P ALIGN="JUSTIFY">Пример 2.15.</i> Содержание файла netscape.jsc, ссылка на который установлена в атрибуте SCR тага &lt;SCRIPT   &gt; из примера 6
<pre>
	if(window.navigator.appName == "Netscape")
	  {
	   document.write("&lt;br&gt;&lt;center&gt;&lt;font color=steelblue size=+5&gt;");
	   document.write("У вас хороший навигатор.");
	   document.write("&lt;/font&gt;&lt;/center&gt;");
	  }
	else
	  {
	   document.write("&lt;font color=red size=+3&gt;Необходим Netscape Navigator
		версии 3.0 и выше.&lt;/font&gt;");
	   window.alert("Down load new version of your browser now.");
	  }</Pre>
<P ALIGN="JUSTIFY">На этом можно закончить вступительную часть, посвященную примерам JavaScript-кода, и перейти к более планомерному изложению приемов программирования на JavaScript, если бы не одно "но". Дело в том, что любой автор, который собирается излагать программирование на JavaScript, встречается с проблемой постепенного наращивания сложности примеров. Материал надо начинать излагать "от печки", но вот этой самой печки нет. Все программы на JavaScript (Client-site JavaScript) - это в той или иной мере программы обработки событий, которые связаны с теми или иными информационными объектами. Без изучения этих объектов нельзя начинать ничего программировать.
<P ALIGN="JUSTIFY">Однако, существует лазейка в этом заколдованном круге, которой мы и воспользуемся. Это схема JavaScript универсального локатора ресурсов (URL). В наших примерах мы уже использовали эту схему. Она помогала нам открывать окно-передупреждение при выборе гипертекстовой ссылки (пример 2.10) и избегать перезагрузки страниц (пример 2.11). Мы будем пользоваться этой схемой вызова JavaScript-кода до тех пор, пока не появится в нашем рассмотрении объект (контейнер HTML) с атрибутом обработки события.
<P ALIGN="JUSTIFY">После этого небольшого отступления начнем рассматривать приемы программирования на JavaScript в соответствии с иерархией объектов этого языка, начиная с самого старшего объекта и двигаясь вглубь дерева объектов: от объекта "окно" к элементам формы.
<p><center><p>
<font size=-1>
<a href="glava2~3.htm">Назад</a> | <a href="index.htm">Содержание</a> | <a href="glava2~5.htm">Вперед</a></font></center></p>
</p>
<hr noshade>
<center>
<font size=1 class=arial>
Comments: <a href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM'" class=noneline>info@citmgu.ru</a><br>
Copyright &copy; <a href="http://www.citmgu.ru/" class=noneline>CIT</a>
</font></center></body></html>
